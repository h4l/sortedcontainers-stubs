# Because __new__'s overloads use 0, 1 or 2 two generic types for different
# overloads, mypy gets confused and complains that specifying 1 type arg is
# too few, and 2 is too many. So it's not possible to subscript the
# constructor. Instead, specify the type of the thing the constructor is
# assigned to.
- case: constructor_cannot_be_subscripted_with_1_param
  main: |
    from sortedcontainers import SortedList
    SortedList[int]() # E: Type application has too few types (2 expected)  [misc]

- case: constructor_cannot_be_subscripted_with_2_params
  main: |
    from sortedcontainers import SortedList
    SortedList[None, int]() # E: Type application has too many types (1 expected)  [misc]

- case: constructor
  main: |
    from sortedcontainers import SortedList

    reveal_type(SortedList())           # N: Revealed type is "sortedcontainers.sortedlist.SortedList[<nothing>]"
    reveal_type(SortedList([1, 2, 3]))  # N: Revealed type is "sortedcontainers.sortedlist.SortedList[builtins.int]"
    l: SortedList[int] = SortedList()
    reveal_type(l)                      # N: Revealed type is "sortedcontainers.sortedlist.SortedList[builtins.int]"

    def str_to_int(x: str) -> int:
      return int(x)

    # SortedList constructor returns SortedKeyList when a key function is passed
    reveal_type(SortedList(None, str_to_int))  # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
    reveal_type(SortedList(key=str_to_int))    # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"

- case: SortedKeyList_constructor
  main: |
    from sortedcontainers import SortedList, SortedKeyList

    # SortedKeyList constructor always returns SortedKeyList
    reveal_type(SortedKeyList[int, int]())      # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.int, builtins.int]"
    reveal_type(SortedKeyList())           # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[<nothing>, <nothing>]"
    reveal_type(SortedKeyList([1, 2, 3]))  # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.int, builtins.int]"

    l: SortedKeyList[int, int] = SortedKeyList()

    # Can create a SortedList with a non-comparable type like this
    l2: SortedList[object] = SortedKeyList([[], object()], key=id)

    def str_to_int(x: str) -> int:
      return int(x)

    reveal_type(SortedKeyList(None, str_to_int))  # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
    reveal_type(SortedKeyList(key=str_to_int))    # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"

- case: constructor_references
  main: |
    from dataclasses import dataclass, field
    from sortedcontainers import SortedList, SortedKeyList

    def str_to_int(x: str) -> int:
        return int(x)

    @dataclass
    class Example():
        samples: SortedList[str] = field(default_factory=SortedList)
        named_samples: SortedKeyList[str, int] = field(
            default_factory=lambda: SortedKeyList(key=str_to_int)
        )

    @dataclass
    class InvalidExample():
        named_samples: SortedKeyList[float, int] = field(
            default_factory=lambda: SortedKeyList(key=str_to_int)  # E: Argument "key" to "SortedKeyList" has incompatible type "Callable[[str], int]"; expected "Callable[[float], int]"  [arg-type]
        )

- case: constructor_errors
  regex: true
  main: |
    from sortedcontainers import SortedList, SortedKeyList

    def str_to_int_key(x: str) -> int:
      return int(x)

    # key func does not accept element type
    SortedList([1, 2, 3], key=str_to_int_key)  # E: Argument "key" to "SortedList" has incompatible type .* [arg-type]

    # Not comparable
    SortedList([object()])  # E: Value of type variable "_OrderT" of "SortedList" cannot be "object"  \[type-var\]

# We'd like these to be errors, but can't type them at the moment
- case: constructor_type_issues_1
  regex: false
  main: |
    from sortedcontainers import SortedList, SortedKeyList

    # This would fail when adding > 1 value at runtime
    non_comparable_elements1: SortedList[type] = SortedList()

    # However, we do type it correctly when values are provided to the constructor
    non_comparable_elements2: SortedList[type] = SortedList([str])
  out: |
    main:7: error: Value of type variable "_OrderT" of "SortedList" cannot be "type[str]"  [type-var]
    main:7: error: Incompatible types in assignment (expression has type "SortedList[type[str]]", variable has type "SortedList[type]")  [assignment]

- case: constructor_type_issues_2
  regex: false
  main: |
    from sortedcontainers import SortedList, SortedKeyList

    # This would fail when adding > 1 value at runtime
    non_comparable_elements1: SortedList[type] = SortedKeyList()

    # However, we do type it correctly when values are provided to the constructor
    non_comparable_elements2: SortedList[type] = SortedKeyList([str])
  out: |
    main:7: error: Value of type variable "_OrderT" of "SortedKeyList" cannot be "type[str]"  [type-var]
    main:7: error: Incompatible types in assignment (expression has type "SortedKeyList[type[str], type[str]]", variable has type "SortedList[type]")  [assignment]

- case: comparison_operators
  main: |
    from sortedcontainers import SortedList
    s = SortedList(['a'])
    si = SortedList([1, 2])

    reveal_type(s < s)   # N: Revealed type is "builtins.bool"
    reveal_type(s <= s)  # N: Revealed type is "builtins.bool"
    reveal_type(s > s)   # N: Revealed type is "builtins.bool"
    reveal_type(s >= s)  # N: Revealed type is "builtins.bool"
    # equality checks on different types is fine
    reveal_type(s == si)  # N: Revealed type is "builtins.bool"
    reveal_type(s != si)  # N: Revealed type is "builtins.bool"

    # Can't compare order on different types
    s < si   # E: Unsupported operand types for < ("SortedList[str]" and "SortedList[int]")  [operator]
    s <= si  # E: Unsupported operand types for <= ("SortedList[str]" and "SortedList[int]")  [operator]
    s > si   # E: Unsupported operand types for > ("SortedList[str]" and "SortedList[int]")  [operator]
    s >= si  # E: Unsupported operand types for >= ("SortedList[str]" and "SortedList[int]")  [operator]

- case: adding_methods
  main: |
    from sortedcontainers import SortedList
    s = SortedList(['a'])

    reveal_type(s.add('a'))            # N: Revealed type is "None"
    reveal_type(s.update(['b', 'c']))  # N: Revealed type is "None"
    reveal_type(s + s)                 # N: Revealed type is "sortedcontainers.sortedlist.SortedList[builtins.str]"
    s += s
    s += [1]                           # E: List item 0 has incompatible type "int"; expected "str"  [list-item]
    reveal_type(s * 2)                 # N: Revealed type is "sortedcontainers.sortedlist.SortedList[builtins.str]"
    reveal_type(2 * s)                 # N: Revealed type is "sortedcontainers.sortedlist.SortedList[builtins.str]"
    s *= 2

- case: removing_methods
  main: |
    from sortedcontainers import SortedList
    s = SortedList(['a', 'b', 'c', 'd', 'e'])

    reveal_type(s.pop())         # N: Revealed type is "builtins.str"
    reveal_type(s.pop(0))        # N: Revealed type is "builtins.str"
    reveal_type(s.discard('z'))  # N: Revealed type is "None"
    reveal_type(s.remove('a'))   # N: Revealed type is "None"
    del s[0]
    del s[0:5]
    reveal_type(s.clear())       # N: Revealed type is "None"

- case: lookup_methods
  main: |
    from sortedcontainers import SortedList
    s = SortedList(['a', 'b', 'c', 'd', 'e'])

    reveal_type(s.bisect_left("b"))   # N: Revealed type is "builtins.int"
    reveal_type(s.bisect_right("b"))  # N: Revealed type is "builtins.int"
    reveal_type(s.bisect("b"))        # N: Revealed type is "builtins.int"
    reveal_type(s.count("b"))         # N: Revealed type is "builtins.int"
    reveal_type("b" in s)             # N: Revealed type is "builtins.bool"
    reveal_type(s[2])                 # N: Revealed type is "builtins.str"
    reveal_type(s[2:5])               # N: Revealed type is "builtins.list[builtins.str]"

- case: iter_methods
  main: |
    from sortedcontainers import SortedList
    s = SortedList(['a', 'b', 'c', 'd', 'e'])

    reveal_type(s.irange())   # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(s.irange(     # N: Revealed type is "typing.Iterator[builtins.str]"
      minimum="a", maximum="c", inclusive=(True, False), reverse=False
    ))
    reveal_type(s.islice())   # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(s.islice(     # N: Revealed type is "typing.Iterator[builtins.str]"
      start=0, stop=3, reverse=False
    ))
    reveal_type(iter(s))      # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(reversed(s))  # N: Revealed type is "builtins.reversed[builtins.str]"

- case: misc_methods
  main: |
    from sortedcontainers import SortedList

    def str_to_int(x: str) -> int:
      return int(x)

    s = SortedList(['a', 'b', 'c', 'd', 'e'])
    sk = SortedList(['1', '2'], key=str_to_int)

    reveal_type(s.key)           # N: Revealed type is "Union[def (builtins.str) -> Any, None]"
    reveal_type(s.copy())        # N: Revealed type is "sortedcontainers.sortedlist.SortedList[builtins.str]"
    reveal_type(sk.copy())       # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
    reveal_type(len(s))          # N: Revealed type is "builtins.int"
    reveal_type(s._reset(9001))  # N: Revealed type is "None"

- case: sorted_key_list_methods
  main: |
    from sortedcontainers import SortedList

    def str_to_int(x: str) -> int:
      return int(x)

    s = SortedList(['1', '2'], key=str_to_int)

    reveal_type(s.key)                  # N: Revealed type is "def (builtins.str) -> builtins.int"
    reveal_type(s.bisect_key_left(4))   # N: Revealed type is "builtins.int"
    reveal_type(s.bisect_key_right(4))  # N: Revealed type is "builtins.int"
    reveal_type(s.irange_key())         # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(s.irange_key(0, 5))     # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(s.irange_key(           # N: Revealed type is "typing.Iterator[builtins.str]"
      0, 5, (True, False), False
    ))
    reveal_type(s.irange_key(           # N: Revealed type is "typing.Iterator[builtins.str]"
      min_key=0, max_key=5, inclusive=(True, True), reverse=False
    ))

- case: value_order_type_persistence
  main: |
    from sortedcontainers import SortedList

    def str_to_int(x: str) -> int:
      return int(x)

    s = SortedList(['1', '2'], key=str_to_int)

    # The value and order types are maintained when creating new lists
    reveal_type(s + ['5'])  # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
    reveal_type(['5'] + s)  # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
    reveal_type(s * 2)      # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
    reveal_type(2 * s)      # N: Revealed type is "sortedcontainers.sortedlist.SortedKeyList[builtins.str, builtins.int]"
