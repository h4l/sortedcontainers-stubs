- case: constructor
  # skip: sys.version_info < (3, 9)
  main: |
    from sortedcontainers import SortedDict

    # It's not possible to use explicit type parameters with the constructor,
    # because mypy simultaneously expects 2 and 3 parameters to be specified.
    # (Some __new__ overloads use 2, some 3, which is probably why).
    SortedDict[str, int]()        # E: Type application has too few types (3 expected)  [misc]
    SortedDict[None, int, str]()  # E: Type application has too many types (2 expected)  [misc]

    reveal_type(SortedDict())                  # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[<nothing>, <nothing>]"
    reveal_type(SortedDict([('a', 1)]))        # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.str, builtins.int]"
    reveal_type(SortedDict(a=1))               # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.str, builtins.int]"
    reveal_type(SortedDict([('a', 1)], b=2))   # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.str, builtins.int]"
    d: SortedDict[str, int] = SortedDict()
    reveal_type(d)                             # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.str, builtins.int]"

    def str_to_int(x: str) -> int:
      return int(x)

    reveal_type(SortedDict(str_to_int))                       # N: Revealed type is "sortedcontainers.sorteddict.SortedKeyDict[builtins.str, <nothing>, builtins.int]"
    reveal_type(SortedDict(str_to_int, a=1.2))                # N: Revealed type is "sortedcontainers.sorteddict.SortedKeyDict[builtins.str, builtins.float, builtins.int]"
    reveal_type(SortedDict(str_to_int, [('a', 1.2)]))         # N: Revealed type is "sortedcontainers.sorteddict.SortedKeyDict[builtins.str, builtins.float, builtins.int]"
    #reveal_type(SortedDict(str_to_int, [('a', 1.2)], a=1.2))  # N_ Revealed type is "sortedcontainers.sorteddict.SortedKeyDict[builtins.str, builtins.float, builtins.int]"

- case: constructor_references
  main: |
    from dataclasses import dataclass, field
    from sortedcontainers import SortedDict
    from sortedcontainers.sorteddict import SortedKeyDict

    def str_to_int(x: str) -> int:
        return int(x)

    @dataclass
    class Example():
        samples: SortedDict[str, float] = field(default_factory=SortedDict)
        named_samples: SortedKeyDict[str, float, int] = field(
            default_factory=lambda: SortedDict(str_to_int)
        )

    @dataclass
    class InvalidExample():
        named_samples: SortedKeyDict[float, float, int] = field(
            default_factory=lambda: SortedDict(str_to_int)
        )
  out: |
    main:18: error: Argument "default_factory" to "field" has incompatible type "Callable[[], SortedKeyDict[str, float, int]]"; expected "Callable[[], SortedKeyDict[float, float, int]]"  [arg-type]
    main:18: error: Incompatible return value type (got "SortedKeyDict[str, float, int]", expected "SortedKeyDict[float, float, int]")  [return-value]

- case: constructor_errors
  main: |
    from sortedcontainers import SortedDict

    def str_to_int_key(x: str) -> int:
      return int(x)

    def float_to_int_key(x: float) -> int:
      return int(x)

    # key func does not accept element type
    #SortedDict(str_to_int_key, [(1, 'x')])  # E_ Argument 2 to "SortedDict" has incompatible type "list[tuple[int, str]]"; expected "Iterable[tuple[str, <nothing>]] | SupportsKeysAndGetItem[str, <nothing>]"  [arg-type]

    # kwargs imply str keys â€” can't mix key types
    SortedDict(float_to_int_key, a='x')                # E: Argument 1 to "SortedDict" has incompatible type "Callable[[float], int]"; expected "Callable[[str], int]"  [arg-type]
    SortedDict([(1, 'x')], a='x')                      # E: List item 0 has incompatible type "tuple[int, str]"; expected "tuple[str, str]"  [list-item]
    SortedDict(float_to_int_key, [(1.2, 'x')], a='x')  # E: Argument 1 to "SortedDict" has incompatible type "Callable[[float], int]"; expected "Callable[[str], int]"  [arg-type]


    # Without a key func, keys must be hashable and comparable.

    # Comparable but not hashable:
    SortedDict([([], 'x')]) # E: Value of type variable "_OrderT" of "SortedDict" cannot be "list[<nothing>]"  [type-var]
    # Hashable but not comparable:
    SortedDict([(object(), 'x')]) # E: Value of type variable "_OrderT" of "SortedDict" cannot be "object"  [type-var]

    # With a key func, keys only need to be hashable:

    # Comparable but not hashable:
                                       # I think this error's message is misleading because of the ambiguous __new__ overloads with and without kwargs. It should be an error in any case.
    SortedDict(id, [([], 'x')])        # ER: Argument 2 to "SortedDict" has incompatible type "list\[tuple\[list\[<nothing>\], str\]\]"; expected ".*"  \[arg-type\]
    # Hashable but not comparable:
    SortedDict(id, [(object(), 'x')])  # OK

  out: |
    main:15: error: List item 0 has incompatible type "tuple[float, str]"; expected "tuple[str, str]"  [list-item]

# We'd like these to be errors, but can't type them at the moment
- case: constructor_type_issues_1
  regex: false
  main: |
    from sortedcontainers import SortedDict

    # This would fail when adding > 1 value at runtime
    non_comparable_elements1: SortedDict[type, int] = SortedDict()

    # However, we do type it correctly when values are provided to the constructor
    non_comparable_elements2: SortedDict[type, int] = SortedDict([(str, 42)])
  out: |
    main:7: error: Value of type variable "_OrderT" of "SortedDict" cannot be "type[str]"  [type-var]
    main:7: error: Incompatible types in assignment (expression has type "SortedDict[type[str], int]", variable has type "SortedDict[type, int]")  [assignment]


- case: mutable_mapping_methods
  main: |
    from sortedcontainers import SortedDict
    s = SortedDict(a=1, b=2)

    reveal_type(s['a'])   # N: Revealed type is "builtins.int"
    s['a'] = 3
    s['a'] = 'x'          # E: Incompatible types in assignment (expression has type "str", target has type "int")  [assignment]
    del s['a']
    del s[42]             # E: Argument 1 to "__delitem__" of "SortedDict" has incompatible type "int"; expected "str"  [arg-type]
    reveal_type(iter(s))  # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(len(s))   # N: Revealed type is "builtins.int"

- case: addition_methods
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1, b=2)

    d.setdefault('c', 43)
    d.setdefault(object(), 43.4)  # multiple errors in out
  out: |
    main:5: error: Argument 1 to "setdefault" of "SortedDict" has incompatible type "object"; expected "str"  [arg-type]
    main:5: error: Argument 2 to "setdefault" of "SortedDict" has incompatible type "float"; expected "int"  [arg-type]

- case: addition_methods__update
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1, b=2)
    int_d = SortedDict({1: 'a'})

    d.update()
    int_d.update()
    d.update(a=1)
    d.update([('a', 1)])
    d.update({'a': 1})
    d.update([('a', 1)], b=2)
    d.update({'a': 1}, b=2)

- case: addition_methods__update_error_1
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1, b=2)

    d.update(a=1.2)
  out: |
    main:4: error: No overload variant of "update" of "SortedDict" matches argument type "float"  [call-overload]
    main:4: note: Possible overload variants:
    main:4: note:     def update(self) -> None
    main:4: note:     def update(self, SupportsKeysAndGetItem[str, int], /, **kwargs: int) -> None
    main:4: note:     def update(self, SupportsKeysAndGetItem[str, int], /) -> None
    main:4: note:     def update(self, Iterable[tuple[str, int]], /, **kwargs: int) -> None
    main:4: note:     def update(self, Iterable[tuple[str, int]], /) -> None
    main:4: note:     def update(self, **kwargs: int) -> None

- case: addition_methods__update_error_2
  main: |
    from sortedcontainers import SortedDict
    int_dict = SortedDict([(1, 'a'), (2, 'b')])

    # Can't use kwargs with non-str SortedDict
    int_dict.update(a='x')
    int_dict.update([(1, 'x')], a='x')
    int_dict.update({1: 'x'}, a='x')
  out: |
    main:5: error: No overload variant of "update" of "SortedDict" matches argument type "str"  [call-overload]
    main:5: note: Possible overload variants:
    main:5: note:     def update(self) -> None
    main:5: note:     def update(self, SupportsKeysAndGetItem[int, str], /) -> None
    main:5: note:     def update(self, Iterable[tuple[int, str]], /) -> None
    main:6: error: No overload variant of "update" of "SortedDict" matches argument types "list[tuple[int, str]]", "str"  [call-overload]
    main:6: note: Possible overload variants:
    main:6: note:     def update(self) -> None
    main:6: note:     def update(self, SupportsKeysAndGetItem[int, str], /) -> None
    main:6: note:     def update(self, Iterable[tuple[int, str]], /) -> None
    main:7: error: No overload variant of "update" of "SortedDict" matches argument types "dict[int, str]", "str"  [call-overload]
    main:7: note: Possible overload variants:
    main:7: note:     def update(self) -> None
    main:7: note:     def update(self, SupportsKeysAndGetItem[int, str], /) -> None
    main:7: note:     def update(self, Iterable[tuple[int, str]], /) -> None

- case: removal_methods
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    reveal_type(d.clear())           # N: Revealed type is "None"
    reveal_type(d.pop('a'))          # N: Revealed type is "builtins.float"
    reveal_type(d.pop('a', None))    # N: Revealed type is "Union[builtins.float, None]"
    reveal_type(d.popitem())         # N: Revealed type is "tuple[builtins.str, builtins.float]"
    reveal_type(d.popitem(0))        # N: Revealed type is "tuple[builtins.str, builtins.float]"
    reveal_type(d.popitem(index=0))  # N: Revealed type is "tuple[builtins.str, builtins.float]"

- case: lookup_methods
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    reveal_type('a' in d)             # N: Revealed type is "builtins.bool"
    reveal_type(d.get('a'))           # N: Revealed type is "Union[builtins.float, None]"
    reveal_type(d.get('a', default=())) # N: Revealed type is "Union[builtins.float, tuple[]]"
    reveal_type(d.peekitem())         # N: Revealed type is "tuple[builtins.str, builtins.float]"
    reveal_type(d.peekitem(0))        # N: Revealed type is "tuple[builtins.str, builtins.float]"
    reveal_type(d.peekitem(index=0))  # N: Revealed type is "tuple[builtins.str, builtins.float]"

- case: view_methods
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    reveal_type(d.keys())  # N: Revealed type is "sortedcontainers.sorteddict.SortedKeysView[builtins.str]"
    reveal_type(d.items())  # N: Revealed type is "sortedcontainers.sorteddict.SortedItemsView[builtins.str, builtins.float]"
    reveal_type(d.values())  # N: Revealed type is "sortedcontainers.sorteddict.SortedValuesView[builtins.float]"

- case: misc_methods
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    reveal_type(d.copy())                          # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.str, builtins.float]"
    reveal_type(SortedDict.fromkeys([1, 2]))       # N: # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.int, None]"
    reveal_type(SortedDict.fromkeys([1, 2], 'a'))  # N: # N: Revealed type is "sortedcontainers.sorteddict.SortedDict[builtins.int, builtins.str]"
    reveal_type(reversed(d))                       # N: # N: Revealed type is "builtins.reversed[builtins.str]"
    reveal_type(d == None)                         # N: # N: Revealed type is "builtins.bool"
    reveal_type(d != None)                         # N: # N: Revealed type is "builtins.bool"
    reveal_type(repr(d))                           # N: # N: Revealed type is "builtins.str"


- case: list_methods
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    reveal_type(d.bisect_left("b"))   # N: Revealed type is "builtins.int"
    reveal_type(d.bisect_right("b"))  # N: Revealed type is "builtins.int"
    reveal_type(d.bisect("b"))        # N: Revealed type is "builtins.int"
    reveal_type(d.index("b"))         # N: Revealed type is "builtins.int"

    reveal_type(d.irange())           # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(d.irange(             # N: Revealed type is "typing.Iterator[builtins.str]"
      minimum="a", maximum="c", inclusive=(True, False), reverse=False
    ))
    reveal_type(d.islice())           # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(d.islice(             # N: Revealed type is "typing.Iterator[builtins.str]"
      start=0, stop=3, reverse=False
    ))
    reveal_type(d._reset(9001))       # N: Revealed type is "None"

- case: list_methods__missing_count
  expect_fail: true
  main: |
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    # documentation bug: SortedDict docs say it has list's count() method, but
    # it's not added in the implementation, so I've not typed it yet.
    reveal_type(d.count("b"))         # N: Revealed type is "builtins.int"

- case: sorted_key_dict_methods
  main: |
    from sortedcontainers import SortedDict

    def str_to_int(x: str) -> int:
      return int(x)

    d = SortedDict(str_to_int, [('2', 1.2), ('10', 1.3)])

    reveal_type(d.key)  # N: Revealed type is "def (builtins.str) -> builtins.int"
    reveal_type(d.bisect_key_left(4))   # N: Revealed type is "builtins.int"
    reveal_type(d.bisect_key_right(4))  # N: Revealed type is "builtins.int"
    reveal_type(d.irange_key())         # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(d.irange_key(0, 5))     # N: Revealed type is "typing.Iterator[builtins.str]"
    reveal_type(d.irange_key(           # N: Revealed type is "typing.Iterator[builtins.str]"
      0, 5, (True, False), False
    ))
    reveal_type(d.irange_key(           # N: Revealed type is "typing.Iterator[builtins.str]"
      min_key=0, max_key=5, inclusive=(True, True), reverse=False
    ))

- case: key_order_type_persistence
  main: |
    from sortedcontainers import SortedDict

    def str_to_int(x: str) -> int:
      return int(x)

    d = SortedDict(str_to_int, [('2', 1.2), ('10', 1.3)])

    # The key and order types are maintained when creating new dicts
    reveal_type(d.copy())  # N: Revealed type is "sortedcontainers.sorteddict.SortedKeyDict[builtins.str, builtins.float, builtins.int]"

- case: view_types
  main: |
    from typing import KeysView, ItemsView, ValuesView, Sequence
    from sortedcontainers import SortedDict
    d = SortedDict(a=1.1, b=2.2)

    # The view types are all sequences as well as regular views

    kv: KeysView[str] = d.keys()
    ks: Sequence[str] = d.keys()
    iv: ItemsView[str, float] = d.items()
    is_: Sequence[tuple[str, float]] = d.items()
    vv: ValuesView[float] = d.values()
    vs: Sequence[float] = d.values()

- case: SortedKeyDict_cannot_be_imported_directly
  main: |
    # It's not exported from the top-level package
    from sortedcontainers import SortedKeyDict
  expect_fail: true

- case: SortedKeyDict_cannot_be_created_using_constructor
  main: |
    from sortedcontainers.sorteddict import SortedKeyDict
    reveal_type(SortedKeyDict())
  out: |
    main:2: error: Missing named argument "this_type_only_exists_as_a_type_annotation_it_cannot_be_created_directly" for "SortedKeyDict"  [call-arg]
    main:2: note: Revealed type is "<nothing>"

- case: SortedKeyDict_cannot_be_created_using_fromkeys
  main: |
    from sortedcontainers.sorteddict import SortedKeyDict
    reveal_type(SortedKeyDict.fromkeys())
  out: |
    main:2: error: "Callable[[NamedArg(NoReturn, 'this_type_only_exists_as_a_type_annotation_it_cannot_be_created_directly')], NoReturn]" has no attribute "fromkeys"  [attr-defined]
    main:2: note: Revealed type is "Any"

